name: Download Images (1 AM - 1 PM EDT)

on:
  schedule:
    - cron: "*/10 * * * *"  # Triggers every 10 minutes
  workflow_dispatch:

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if within allowed time window (1 AM - 1 PM EDT)
        run: |
          current_hour=$(TZ="America/New_York" date +%H)
          echo "Current hour in EDT: $current_hour"
          # Remove any leading zeros
          current_hour=$(echo $current_hour | sed 's/^0*//')
          # If current hour is less than 1 or 13 or greater, exit the job
          if [ "$current_hour" -lt 1 ] || [ "$current_hour" -ge 13 ]; then
              echo "Outside allowed time window (1 AM - 1 PM EDT). Exiting."
              exit 0
          fi

      - name: Download images in a loop
        run: |
          #!/bin/bash
          set -e
          # Loop 10 times (once per minute for 10 minutes)
          for i in {1..10}; do
              echo "Iteration $i/10 at $(date)"
              # Read each row from the CSV (skip header)
              tail -n +2 morning_cameras.csv | while IFS=, read -r sign_location_name direction roadway camera_number url id; do
                  echo "Processing camera: $id"
                  # Use the id as the folder name
                  mkdir -p "$id"
                  
                  # Get current UNIX millisecond timestamp for cache busting
                  ts=$(date +%s%3N)
                  
                  # Generate a human-readable timestamp (e.g., 20250324_0304pm)
                  timestamp=$(date '+%Y%m%d_%I%M%P')
                  
                  # Construct the output filename: id/id_timestamp.jpg
                  outfile="${id}/${id}_${timestamp}.jpg"
                  
                  # Download the image with cache-busting query parameter
                  curl "${url}?${ts}" -o "$outfile"
              done
              # Sleep 60 seconds before the next iteration, unless it's the last iteration
              if [ $i -lt 10 ]; then
                  echo "Sleeping for 60 seconds..."
                  sleep 60
              fi
          done

      - name: Commit and push new images
        run: |
          # Set up Git configuration
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # Add all changes (new images)
          git add .
          
          # Commit and push only if there are changes
          if ! git diff-index --quiet HEAD; then
            git commit -m "Add images: $(date '+%Y-%m-%d %H:%M:%S') [skip ci]"
            git push origin HEAD:${GITHUB_REF#refs/heads/}
          else
            echo "No changes to commit."
          fi
